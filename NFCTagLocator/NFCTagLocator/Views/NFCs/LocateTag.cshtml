@model IEnumerable<NFCTagLocator.Models.NFC>

@{
    ViewBag.Title = "LocateTag";
}


<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <title></title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>

    <script type="text/javascript">

        var map = null;

        // Load the traffic module
        function trafficModuleLoaded() {
            alert('Traffic Module Loaded')
        }

        // ********************GET MAP CONFIGURATION********************
        function GetMap() {
            // Initialize the map
            map = new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
                credentials: "AlCwJKeo1G8Dd7xSR7HJPID3lLyGL0dWRzLT4w0Hy904JTfDTXzU3D6yBv7vhUWC",
                mapTypeId: Microsoft.Maps.MapTypeId.road,
                zoom: 5
            });

            // initialise the location provider
            var geoLocationProvider = new Microsoft.Maps.GeoLocationProvider(map);

            // return users current location
            geoLocationProvider.getCurrentPosition();

            Microsoft.Maps.loadModule('Microsoft.Maps.Directions', { callback: directionsModuleLoaded });

        }

        function directionsModuleLoaded() {
            // initialise the DirectionsManager
            var directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);

            // create start / end points and add them to the route
            var startWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: "Tallaght, Dublin" });
            var endWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: "Kidare, Ireland" });

            directionsManager.addWaypoint(startWaypoint);
            directionsManager.addWaypoint(endWaypoint);

            // set the directions render options; specify DIV where itinerary will be displayed
            directionsManager.setRenderOptions({ itineraryContainer: document.getElementById('itineraryDiv') });

            // specify a handler for when directions requested but there is an error
            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', displayMessage);
            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsError', displayError);

            // calculate directions and display route on map
            directionsManager.calculateDirections();

        }

        // display message if success
        function displayMessage(e) {
            alert("Route calculation finished.");
        }
        // display message if error
        function displayError(e) {
            alert(e.message);
        }

        function loadTrafficModule() {
            Microsoft.Maps.loadModule('Microsoft.Maps.Traffic', { callback: trafficModuleLoaded });
        }

        function ClickRoute(credentials) {
            map.getCredentials(MakeRouteRequest);
        }

        function MakeRouteRequest(credentials) {
            var routeRequest = "http://dev.virtualearth.net/REST/v1/Routes?wp.0=" + document.getElementById('txtStart').value + "&wp.1=" + document.getElementById('txtEnd').value + "&routePathOutput=Points&output=json&jsonp=RouteCallback&key=" + credentials;

            CallRestService(routeRequest);
        }

        function RouteCallback(result) {
            if (result &&
                  result.resourceSets &&
                  result.resourceSets.length > 0 &&
                  result.resourceSets[0].resources &&
                  result.resourceSets[0].resources.length > 0) {
                // Set the map view
                var bbox = result.resourceSets[0].resources[0].bbox;
                var viewBoundaries = Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(bbox[0], bbox[1]),
                    new Microsoft.Maps.Location(bbox[2], bbox[3]));
                map.setView({ bounds: viewBoundaries });

                // Draw the route
                var routeline = result.resourceSets[0].resources[0].routePath.line;
                var routepoints = new Array();

                for (var i = 0; i < routeline.coordinates.length; i++) {
                    routepoints[i] = new Microsoft.Maps.Location(routeline.coordinates[i][0], routeline.coordinates[i][1]);
                }

                // Draw the route on the map
                var routeshape = new Microsoft.Maps.Polyline(routepoints, { strokeColor: new Microsoft.Maps.Color(200, 0, 0, 200) });
                map.entities.push(routeshape);
            }
        }

        function CallRestService(request) {
            var script = document.createElement("script");
            script.setAttribute("type", "text/javascript");
            script.setAttribute("src", request);
            document.body.appendChild(script);
        }

        function getCurrentLocation() {
            var geoLocationProvider = new Microsoft.Maps.GeoLocationProvider(map);
            geoLocationProvider.getCurrentPosition(
                {
                    successCallback: successCallback
                });
        }

        //function getLocation() {
        //    var geoLocationProvider = new Microsoft.Maps.GeoLocationProvider(map);
        //    if (navigator.geolocation) {
        //        navigator.geolocation.watchPosition(showPosition, showError);
        //    }
        //    else {
        //        innerHTML = "Geolocation is not supported by this browser."
        //    }
        //}

        //showPosition(getCurrentPosition)
        //{
            
        //}

        //function showError(error) {
        //    switch (error.code) {
        //        case error.PERMISSION_DENIED:
        //            x.innerHTML = "User denied the request for Geolocation."
        //            break;
        //        case error.POSITION_UNAVAILABLE:
        //            x.innerHTML = "Location information is unavailable."
        //            break;
        //        case error.TIMEOUT:
        //            x.innerHTML = "The request to get user location timed out."
        //            break;
        //        case error.UNKNOWN_ERROR:
        //            x.innerHTML = "An unknown error occurred."
        //            break;
        //    }
        //}

        function successCallback(object) {
            alert('Success callback invoked, current map center ' + object.center);
        }
    </script>
</head>

<body onload="GetMap();">
    <p></p>
    <div id='mapDiv' style="position:relative; width:600px; height:400px;"></div>

    <input id="txtStart" type="text" placeholder="Enter From Destination" required=required />
    <input id="txtEnd" type="text" placeholder="Enter To Destination" required=required />
    <input type="button" value="Calculate Route" onclick="ClickRoute()" />

    <div><input type="button" value="GetCurrentLocation" onclick="getCurrentLocation();" /></div>

    <div><input type="button" value="LoadTrafficModule" onclick="loadTrafficModule();" /></div>
    <div id='output'> </div>

    <div id='itineraryDiv' style="position:relative; width:600px;"></div>

    <select name="categories">
        <option value="retail">Retail</option>
        <option value="restaurants">Restaurants</option>
        <option value="financial">Financial</option>
        <option value="services">Services</option>
    </select>
    <br /><br />
    <input type="submit" />
</body>
</html>